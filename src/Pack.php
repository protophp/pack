<?php

namespace Proto\Pack;

class Pack implements PackInterface
{
    use BufferTrait;

    private $data = null;
    private $header = null;
    private $string;
    private $HL;
    private $DL;

    private $bT;
    private $bHL;
    private $bDL;

    private $completed = false;

    private static $ID2T;

    public function setData($data): PackInterface
    {
        $this->data = $data;
        return $this;
    }

    public function getData()
    {
        return $this->data;
    }

    public function isData(): bool
    {
        return isset($this->data);
    }

    public function setHeader($header): PackInterface
    {
        $this->header = $header;
        return $this;
    }

    public function getHeader()
    {
        return $this->header;
    }

    public function isHeader(): bool
    {
        return isset($this->header);
    }

    public function chunk(string $chunk)
    {
        if ($this->completed) {
            // TODO: Log warning error
            return;
        }

        $this->buffer .= $chunk;
        $return = false;

        /*
         *  Binary pack structure
         *  -------------------------------
         *  | T | HL | DL | HData | DData |
         *  -------------------------------
         */

        // Parse T
        $this->parseT($return);
        if ($return) return;

        // Parse HL
        if (!isset($this->bHL)) {
            $this->parseL($this->bT[0], $this->bHL, $return);
            if ($return) return;
        }

        // Parse DL
        if (!isset($this->bDL)) {
            $this->parseL($this->bT[1], $this->bDL, $return);
            if ($return) return;
        }

        // Parse HData
        if (!isset($this->header)) {
            $this->parseData($this->bT[0], $this->bHL, $this->header, $return);
            if ($return) return;
        }

        // Parse DData
        if (!isset($this->data)) {
            $this->parseData($this->bT[1], $this->bDL, $this->data, $return);
            if ($return) return;
        }

        $this->completed();
    }

    private function parseT(&$return)
    {
        if (!isset($this->bT)) {
            if ($this->bufferLen() < 1) {
                $return = true;
                return;
            }
            $this->bT = self::$ID2T[$this->bufferTrim(1)];

            // TODO: Validate T
            // TODO: Log critical error
            // TODO: Throw PackException
        }
    }

    private function parseL(&$XT, &$XL, &$return)
    {
        if ($XT[0] === 0) {         // NULL & BOOL
            $XL = 0;

        } elseif ($XT[0] === 1) {   // INT & FLOAT & DOUBLE
            $XL = 0;

        } elseif ($XT[0] === 2 || $XT[0] === 3) {   // ARRAY & OBJECT & STRING
            if ($this->bufferLen() < $XT[1]) {
                $return = true;
                return;
            }

            $XL = unpack($this->intLength2unsignedPackCode($XT[1]), $this->bufferTrim($XT[1]));
        }
    }

    private function parseData(&$XT, &$XL, &$data, &$return)
    {
        if ($XT[0] === 0) {         // NULL & BOOL
            $data = $XT[1];

        } elseif ($XT[0] === 1) {   // INT & FLOAT & DOUBLE
            if ($this->bufferLen() < $XT[1]) {
                $return = true;
                return;
            }

            $data = unpack($XT[2], $this->bufferTrim($XT[1]));

        } elseif ($XT[0] === 2) {   // ARRAY & OBJECT
            if ($this->bufferLen() < $XL) {
                $return = true;
                return;
            }

            $data = msgpack_unpack($this->bufferTrim($XL));

        } elseif ($XT[0] === 3) {   // ARRAY & OBJECT
            if ($this->bufferLen() < $XL) {
                $return = true;
                return;
            }

            $data = $this->bufferTrim($XL);
        }
    }

    public function __toString(): string
    {
        if (isset($this->string))
            return $this->string;

        $HT = null;
        $DT = null;
        $HL = null;
        $DL = null;
        $HData = null;
        $DData = null;

        /*
         *  Binary pack structure
         *  -------------------------------
         *  | T | HL | DL | HData | DData |
         *  -------------------------------
         */
        $this->ID2T();
        $this->prepare($this->header, $HT, $HL, $HData);
        $this->prepare($this->data, $DT, $DL, $DData);
        $T = array_search([$HT, $DT], self::$ID2T);

        $this->string = $T . $HL . $DL . $HData . $DData;
        return $this->string;
    }

    private function prepare($data, &$T, &$L, &$string)
    {
        if (is_null($data) || is_bool($data)) {
            $T = [0, $this->data];

        } elseif (is_string($data)) {
            $string = $data;
            $L = strlen($data);
            list($code, $l) = $this->int2pack($L);
            $T = [3, $l];
            $L = pack($code, $L);

        } elseif (is_array($data) || is_object($data)) {
            $string = msgpack_pack($data);
            $L = strlen($string);
            list($code, $l) = $this->int2pack($L);
            $T = [2, $l];
            $L = pack($code, $L);

        } elseif (is_int($data)) {
            list($code, $l) = $this->int2pack($data);
            $string = pack($code, $data);
            $T = [1, $l, $code];

        } elseif (is_float($data)) {
            $string = pack('f', $data);
            $T = [1, 4, 'f'];

        } elseif (is_double($this->data)) {
            $string = pack('d', $data);
            $T = [1, 8, 'd'];

        }
    }

    private function intLength2unsignedPackCode(int $length): string
    {
        switch ($length) {
            case 1:
                return 'C';
            case 2:
                return 'S';
            case 4:
                return 'L';
            default:    // 8
                return 'Q';
        }
    }

    private function int2pack($int): array
    {
        if ($int >= 0) {

            if ($int <= 0xFF)
                return ['C', 1];

            if ($int <= 0xFFFF)
                return ['S', 2];

            if ($int <= 0xFFFFFFFF)
                return ['L', 4];

            return ['Q', 8];

        } else {

            if ($int <= -0x80)
                return ['c', 1];

            if ($int <= -0x8000)
                return ['s', 2];

            if ($int <= -0x80000000)
                return ['l', 4];

            return ['q', 8];
        }
    }

    private function ID2T()
    {
        if (isset(self::$ID2T))
            return;

        self::$ID2T = msgpack_unpack('ï¿½ ï¿½ ï¿½ï¿½ ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ Ã¡ï¿½ï¿½ ï¿½ï¿½ Â¡ï¿½ï¿½ ï¿½ï¿½ï¿½Cï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½cï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½Sï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½sï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½Lï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½lï¿½	ï¿½ï¿½ ï¿½ï¿½ï¿½qï¿½
ï¿½ï¿½ ï¿½ï¿½ï¿½fï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½dï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½
ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Cï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Cï¿½ Ã¡ï¿½ï¿½ï¿½Cï¿½ Â¡ï¿½ï¿½ï¿½Cï¿½ï¿½Cï¿½ï¿½ï¿½ï¿½Cï¿½ï¿½cï¿½ï¿½ï¿½ï¿½Cï¿½ï¿½Sï¿½ï¿½ï¿½ï¿½Cï¿½ï¿½sï¿½ï¿½ï¿½ï¿½Cï¿½ï¿½Lï¿½ï¿½ï¿½ï¿½Cï¿½ï¿½lï¿½ï¿½ï¿½ï¿½Cï¿½ï¿½qï¿½ï¿½ï¿½ï¿½Cï¿½ï¿½fï¿½ï¿½ï¿½ï¿½Cï¿½ï¿½dï¿½ ï¿½ï¿½ï¿½Cï¿½ï¿½!ï¿½ï¿½ï¿½Cï¿½ï¿½"ï¿½ï¿½ï¿½Cï¿½ï¿½#ï¿½ï¿½ï¿½Cï¿½ï¿½$ï¿½ï¿½ï¿½Cï¿½ï¿½%ï¿½ï¿½ï¿½Cï¿½ï¿½&ï¿½ï¿½ï¿½Cï¿½ï¿½\'ï¿½ï¿½ï¿½Cï¿½ï¿½(ï¿½ï¿½ï¿½cï¿½ ï¿½ï¿½)ï¿½ï¿½ï¿½cï¿½ Ã¡*ï¿½ï¿½ï¿½cï¿½ Â¡+ï¿½ï¿½ï¿½cï¿½ï¿½Cï¿½,ï¿½ï¿½ï¿½cï¿½ï¿½cï¿½-ï¿½ï¿½ï¿½cï¿½ï¿½Sï¿½.ï¿½ï¿½ï¿½cï¿½ï¿½sï¿½/ï¿½ï¿½ï¿½cï¿½ï¿½L ï¿½ï¿½ï¿½cï¿½ï¿½lï¿½ï¿½ï¿½cï¿½ï¿½qï¿½ï¿½ï¿½cï¿½ï¿½fï¿½ï¿½ï¿½cï¿½ï¿½dï¿½ï¿½ï¿½cï¿½ï¿½ï¿½ï¿½cï¿½ï¿½ï¿½ï¿½cï¿½ï¿½ï¿½ï¿½cï¿½ï¿½ï¿½ï¿½cï¿½	ï¿½ï¿½ï¿½cï¿½ï¿½:ï¿½ï¿½ï¿½cï¿½ï¿½;ï¿½ï¿½ï¿½cï¿½ï¿½<ï¿½ï¿½ï¿½Sï¿½ ï¿½ï¿½=ï¿½ï¿½ï¿½Sï¿½ Ã¡>ï¿½ï¿½ï¿½Sï¿½ Â¡?ï¿½ï¿½ï¿½Sï¿½ï¿½Cï¿½@ï¿½ï¿½ï¿½Sï¿½ï¿½cï¿½Aï¿½ï¿½ï¿½Sï¿½ï¿½Sï¿½Bï¿½ï¿½ï¿½Sï¿½ï¿½sï¿½Cï¿½ï¿½ï¿½Sï¿½ï¿½Lï¿½Dï¿½ï¿½ï¿½Sï¿½ï¿½lï¿½Eï¿½ï¿½ï¿½Sï¿½ï¿½qï¿½Fï¿½ï¿½ï¿½Sï¿½ï¿½fï¿½Gï¿½ï¿½ï¿½Sï¿½ï¿½dï¿½Hï¿½ï¿½ï¿½Sï¿½ï¿½Iï¿½ï¿½ï¿½Sï¿½ï¿½Jï¿½ï¿½ï¿½Sï¿½ï¿½Kï¿½ï¿½ï¿½Sï¿½ï¿½Lï¿½ï¿½ï¿½Sï¿½ï¿½Mï¿½ï¿½ï¿½Sï¿½ï¿½Nï¿½ï¿½ï¿½Sï¿½ï¿½Oï¿½ï¿½ï¿½Sï¿½ï¿½Pï¿½ï¿½ï¿½sï¿½ ï¿½ï¿½Qï¿½ï¿½ï¿½sï¿½ Ã¡Rï¿½ï¿½ï¿½sï¿½ Â¡Sï¿½ï¿½ï¿½sï¿½ï¿½Cï¿½Tï¿½ï¿½ï¿½sï¿½ï¿½cï¿½Uï¿½ï¿½ï¿½sï¿½ï¿½Sï¿½Vï¿½ï¿½ï¿½sï¿½ï¿½sï¿½Wï¿½ï¿½ï¿½sï¿½ï¿½Lï¿½Xï¿½ï¿½ï¿½sï¿½ï¿½lï¿½Yï¿½ï¿½ï¿½sï¿½ï¿½qï¿½Zï¿½ï¿½ï¿½sï¿½ï¿½fï¿½[ï¿½ï¿½ï¿½sï¿½ï¿½dï¿½\ï¿½ï¿½ï¿½sï¿½ï¿½]ï¿½ï¿½ï¿½sï¿½ï¿½^ï¿½ï¿½ï¿½sï¿½ï¿½_ï¿½ï¿½ï¿½sï¿½ï¿½`ï¿½ï¿½ï¿½sï¿½ï¿½aï¿½ï¿½ï¿½sï¿½ï¿½bï¿½ï¿½ï¿½sï¿½ï¿½cï¿½ï¿½ï¿½sï¿½ï¿½dï¿½ï¿½ï¿½Lï¿½ ï¿½ï¿½eï¿½ï¿½ï¿½Lï¿½ Ã¡fï¿½ï¿½ï¿½Lï¿½ Â¡gï¿½ï¿½ï¿½Lï¿½ï¿½Cï¿½hï¿½ï¿½ï¿½Lï¿½ï¿½cï¿½iï¿½ï¿½ï¿½Lï¿½ï¿½Sï¿½jï¿½ï¿½ï¿½Lï¿½ï¿½sï¿½kï¿½ï¿½ï¿½Lï¿½ï¿½Lï¿½lï¿½ï¿½ï¿½Lï¿½ï¿½lï¿½mï¿½ï¿½ï¿½Lï¿½ï¿½qï¿½nï¿½ï¿½ï¿½Lï¿½ï¿½fï¿½oï¿½ï¿½ï¿½Lï¿½ï¿½dï¿½pï¿½ï¿½ï¿½Lï¿½ï¿½qï¿½ï¿½ï¿½Lï¿½ï¿½rï¿½ï¿½ï¿½Lï¿½ï¿½sï¿½ï¿½ï¿½Lï¿½ï¿½tï¿½ï¿½ï¿½Lï¿½ï¿½uï¿½ï¿½ï¿½Lï¿½ï¿½vï¿½ï¿½ï¿½Lï¿½ï¿½wï¿½ï¿½ï¿½Lï¿½ï¿½xï¿½ï¿½ï¿½lï¿½ ï¿½ï¿½yï¿½ï¿½ï¿½lï¿½ Ã¡zï¿½ï¿½ï¿½lï¿½ Â¡{ï¿½ï¿½ï¿½lï¿½ï¿½Cï¿½|ï¿½ï¿½ï¿½lï¿½ï¿½cï¿½}ï¿½ï¿½ï¿½lï¿½ï¿½Sï¿½~ï¿½ï¿½ï¿½lï¿½ï¿½sï¿½ï¿½ï¿½ï¿½lï¿½ï¿½Lï¿½ï¿½ï¿½ï¿½ï¿½lï¿½ï¿½lï¿½ï¿½ï¿½ï¿½ï¿½lï¿½ï¿½qï¿½ï¿½ï¿½ï¿½ï¿½lï¿½ï¿½fï¿½ï¿½ï¿½ï¿½ï¿½lï¿½ï¿½dï¿½ï¿½ï¿½ï¿½ï¿½lï¿½ï¿½ï¿½ï¿½ï¿½ï¿½lï¿½ï¿½ï¿½ï¿½ï¿½ï¿½lï¿½ï¿½ï¿½ï¿½ï¿½ï¿½lï¿½ï¿½ï¿½ï¿½ï¿½ï¿½lï¿½ï¿½ï¿½ï¿½ï¿½ï¿½lï¿½ï¿½ï¿½ï¿½ï¿½ï¿½lï¿½ï¿½ï¿½ï¿½ï¿½ï¿½lï¿½ï¿½ï¿½ï¿½ï¿½ï¿½qï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½qï¿½ Ã¡ï¿½ï¿½ï¿½ï¿½qï¿½ Â¡ï¿½ï¿½ï¿½ï¿½qï¿½ï¿½Cï¿½ï¿½ï¿½ï¿½ï¿½qï¿½ï¿½cï¿½ï¿½ï¿½ï¿½ï¿½qï¿½ï¿½Sï¿½ï¿½ï¿½ï¿½ï¿½qï¿½ï¿½sï¿½ï¿½ï¿½ï¿½ï¿½qï¿½ï¿½Lï¿½ï¿½ï¿½ï¿½ï¿½qï¿½ï¿½lï¿½ï¿½ï¿½ï¿½ï¿½qï¿½ï¿½qï¿½ï¿½ï¿½ï¿½ï¿½qï¿½ï¿½fï¿½ï¿½ï¿½ï¿½ï¿½qï¿½ï¿½dï¿½ï¿½ï¿½ï¿½ï¿½qï¿½ï¿½ï¿½ï¿½ï¿½ï¿½qï¿½ï¿½ï¿½ï¿½ï¿½ï¿½qï¿½ï¿½ï¿½ï¿½ï¿½ï¿½qï¿½ï¿½ï¿½ï¿½ï¿½ï¿½qï¿½ï¿½ï¿½ï¿½ï¿½ï¿½qï¿½ï¿½ï¿½ï¿½ï¿½ï¿½qï¿½ï¿½ï¿½ï¿½ï¿½ï¿½qï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Ã¡ï¿½ï¿½ï¿½ï¿½ Â¡ï¿½ï¿½ï¿½ï¿½ï¿½Cï¿½ï¿½ï¿½ï¿½ï¿½ï¿½cï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Sï¿½ï¿½ï¿½ï¿½ï¿½ï¿½sï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Lï¿½ï¿½ï¿½ï¿½ï¿½ï¿½lï¿½ï¿½ï¿½ï¿½ï¿½ï¿½qï¿½ï¿½ï¿½ï¿½ï¿½ï¿½fï¿½ï¿½ï¿½ï¿½ï¿½ï¿½dï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Ã¡ï¿½ï¿½ï¿½ï¿½ Â¡ï¿½ï¿½ï¿½ï¿½ï¿½Cï¿½ï¿½ï¿½ï¿½ï¿½ï¿½cï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Sï¿½ï¿½ï¿½ï¿½ï¿½ï¿½sï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Lï¿½ï¿½ï¿½ï¿½ï¿½ï¿½lï¿½ï¿½ï¿½ï¿½ï¿½ï¿½qï¿½ï¿½ï¿½ï¿½ï¿½ï¿½fï¿½ï¿½ï¿½ï¿½ï¿½ï¿½dï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Âï¿½ï¿½ï¿½Ãï¿½ï¿½ï¿½Äï¿½ï¿½ï¿½Åï¿½ï¿½ï¿½Æï¿½ï¿½ï¿½Çï¿½ï¿½ï¿½Èï¿½ï¿½ ï¿½ï¿½Éï¿½ï¿½ Ã¡Êï¿½ï¿½ Â¡Ëï¿½ï¿½ï¿½Cï¿½Ìï¿½ï¿½ï¿½cï¿½Íï¿½ï¿½ï¿½Sï¿½Îï¿½ï¿½ï¿½sï¿½Ïï¿½ï¿½ï¿½Lï¿½Ðï¿½ï¿½ï¿½lï¿½Ñï¿½ï¿½ï¿½qï¿½Òï¿½ï¿½ï¿½fï¿½Óï¿½ï¿½ï¿½dï¿½Ôï¿½ï¿½ï¿½Õï¿½ï¿½ï¿½Öï¿½ï¿½ï¿½×ï¿½ï¿½ï¿½Øï¿½ï¿½ï¿½Ùï¿½ï¿½ï¿½Úï¿½ï¿½ï¿½Ûï¿½ï¿½ï¿½Üï¿½ï¿½ ï¿½ï¿½Ýï¿½ï¿½ Ã¡Þï¿½ï¿½ Â¡ßï¿½ï¿½ï¿½Cï¿½ï¿½ï¿½ï¿½ï¿½ï¿½cï¿½áï¿½ï¿½Sï¿½âï¿½ï¿½sï¿½ãï¿½ï¿½Lï¿½äï¿½ï¿½lï¿½åï¿½ï¿½qï¿½æï¿½ï¿½fï¿½çï¿½ï¿½dï¿½èï¿½ï¿½éï¿½ï¿½êï¿½ï¿½ëï¿½ï¿½ìï¿½ï¿½íï¿½ï¿½îï¿½ï¿½ïï¿½');
    }

    private function completed()
    {
        $this->bufferClean();
        $this->completed = true;
        unset($this->bT, $this->bHL, $this->bDL);
    }
}